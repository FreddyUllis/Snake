@tool
extends EditorPlugin

var button: Button

func _enter_tree():
    # Создание кнопки на панели инструментов
    button = Button.new()
    button.text = "Toggle Comment"
    button.connect("pressed", Callable(self, "_on_button_pressed"))
    
    # Добавление кнопки на панель инструментов
    add_control_to_container(CONTAINER_TOOLBAR, button)

func _exit_tree():
    # Удаление кнопки при деактивации плагина
    remove_control_from_container(CONTAINER_TOOLBAR, button)

func _on_button_pressed():
    # Получаем текущий текстовый редактор
    var editor = get_editor_interface().get_script_editor().get_current_editor()
    if not editor or not editor.is_class("TextEdit"):
        return
    
    var text_edit: TextEdit = editor
    
    # Получаем выделенные строки
    var from_line = text_edit.get_selection_from_line()
    var to_line = text_edit.get_selection_to_line()
    
    # Если нет выделения, работаем с текущей строкой
    if from_line == -1 or to_line == -1:
        from_line = text_edit.get_caret_line()
        to_line = from_line
    
    # Определяем, нужно ли комментировать или раскомментировать
    var should_comment = false
    for line in range(from_line, to_line + 1):
        var line_text = text_edit.get_line(line).strip_edges()
        if not line_text.begins_with("#"):
            should_comment = true
            break
    
    # Комментируем или раскомментируем строки
    for line in range(from_line, to_line + 1):
        var line_text = text_edit.get_line(line)
        if should_comment:
            # Добавляем комментарий в начало строки
            text_edit.set_line(line, "# " + line_text)
        else:
            # Убираем комментарий, если он есть
            if line_text.begins_with("#"):
                text_edit.set_line(line, line_text.substr(line_text.find("#") + 1).strip_edges())
    
    # Обновляем текст в редакторе
    text_edit.update()
